list.txt
links :  https://www.tutorialsteacher.com/python/python-list


list definition ::
in python list is a mutable sequence type.A list object contains one or more items of different data types in the square brackets [] seperated by a comma.The following declares a list variables.

Types of list ::

1.Empty List 
mylist = [] $empty list 
  print(mylist)

2.String List
names= ["Jelf","Bill","Steve","Mohan"] $ string list 
print(names)

3.List with Hetrogeneous data
item = [1,"Jeff","Computer",75.50,True]
print item

Important Points::
1.A List can contain unlimited data depending upon the limitation of your computer's memory 
nums = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,45,37,38,39,40,
41,42,43,44,45,46,47,48,49,50]

List Items Access using Index :: 
List items can be accessed using a zero-based index in the square brackets[].Indexes start from zero and increment
by one for each item.
Accessing 

List items can be accessed using a zero-based index in the square brackets []. Indexes start from zero and increment by one for each item. Accessing an item using a large index than the list's total items would result in IndexError.

names=["Jeff", "Bill", "Steve", "Mohan"] 
print(names[0]) # returns "Jeff"
print(names[1]) # returns "Bill"
print(names[2]) # returns "Steve"
print(names[3]) # returns "Mohan"
print(names[4]) # throws IndexError: list index out of range

A list can contain multiple inner lists as items that can be accessed using indexes.
nums=[1, 2, 3, [4, 5, 6, [7, 8, [9]]], 10] 

print(nums[0]) # returns 1
print(nums[1]) # returns 2
print(nums[3]) # returns [4, 5, 6, [7, 8, [9]]]
print(nums[4]) # returns 10
print(nums[3][0]) # returns 4
print(nums[3][3]) # returns [7, 8, [9]]
print(nums[3][3][0]) # returns 7
print(nums[3][3][2]) # returns [9]

List Class
All the list objects are the objects of the list class in Python. Use the list() constructor to convert from other sequence types such as tuple, set, dictionary, string to list.

Example: List Class Copy
nums=[1,2,3,4]
print(type(nums))

mylist=list('Hello')
print(mylist)

nums=list({1:'one',2:'two'})
print(nums)

nums=list((10, 20, 30))
print(nums)

nums=list({100, 200, 300})
print(nums)


.............................................................

how to iterate list :: 

names=["Jeff", "Bill", "Steve", "Mohan"] 
for name in names:
    print(name)


Output:
Jeff
Bill
Steve
Mohan

.............................................................

Update List ::
The list is mutable. You can add new items in the list using the append() or insert() methods, and update items using indexes.
names=["Jeff", "Bill", "Steve", "Mohan"] 
names[0]="Newton" # update 1st item at index 0
names[1]="Ram" # update 2nd item at index 1
names.append("Abdul") # adds new item at the end
print(names)
Output:
["Newton", "Ram", "Steve", "Mohan", "Abdul"]

.............................................................

How to remove itmes in list :: 

Use the remove(), pop() methods, or del keyword to delete the list item or the whole list.


names=["Jeff", "Bill", "Steve", "Mohan"] 
del names[0] # removes item at index 0
print("After del names[0]: ", names)

names.remove("Bill") # removes "Bill"
print("After names.remove("Bill"): ", names)

print(names.pop(0)) # return and removes item at index 0
print("After names.pop(0): ", names)

names.pop() # return removes item at last index
print("After names.pop(): ", names)

del names # removes entire list object
print(names) #error

...........................................................

list operator :: 

List Operators
Like the string, the list is also a sequence. Hence, the operators used with strings are also available for use with the list (and tuple also).

Operator	Example
The + operator returns a list containing all the elements of the first and the second list.	
>>> L1=[1,2,3]
>>> L2=[4,5,6]
>>> L1+L2     
[1, 2, 3, 4, 5, 6]
The * operator concatenates multiple copies of the same list.	
>>> L1=[1,2,3]
>>> L1*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]
The slice operator [] returns the item at the given index. A negative index counts the position from the right side.	
>>> L1=[1, 2, 3]
>>> L1[0] 
1                  
>>> L1[-3]
1
>>> L1[1] 
2
>>> L1[-2]
2
>>> L1[2]
3
>>> L1[-1] 
3
The range slice operator [FromIndex : Untill Index - 1] fetches items in the range specified by the two index operands separated by : symbol.
If the first operand is omitted, the range starts from the index 0. If the second operand is omitted, the range goes up to the end of the list.	
>>> L1=[1, 2, 3, 4, 5, 6]
>>> L1[1:]
[2, 3, 4, 5, 6]
>>> L1[:3]
[1, 2, 3]
>>> L1[1:4]
[2, 3, 4]           
>>> L1[3:] 
[4, 5, 6]
>>> L1[:3]
[1, 2, 3]
>>> L1[-5:-3]
[2, 3]
The in operator returns true if an item exists in the given list.	
>>> L1=[1, 2, 3, 4, 5, 6]
>>> 4 in L1     
True                     
>>> 10 in L1             
False
The not in operator returns true if an item does not exist in the given list.	
>>> L1=[1, 2, 3, 4, 5, 6]
>>> 5 not in L1          
False            
>>> 10 not in L1         
True

.......................................................................................................





list methods :: 
list programs ::




